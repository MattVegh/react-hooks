"Hook into" state and lifecylce methods of components without using classes

Only use functional components across the board

Improve readability and organization of components

Create custom hooks to reuse code across your app

current hooks: useState, useEffect, useContext, useRef, useReducer, useMemo, useCallback, useImperativeHandle,
    useLayoutEffect, useDebugValue

useEffect() replaces componentDidMount, componentDidUpdate, and componentWillUnmount
    Allows us to use side effects. 
    Some side effects: network request, manual DOM manipulation, event listeners, timeouts, intervals
    "return" in useEffect acts as componentWillUnmount
    